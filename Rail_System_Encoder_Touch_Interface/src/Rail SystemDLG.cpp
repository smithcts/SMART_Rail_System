/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.28                          *
*        Compiled Jan 30 2015, 16:41:06                              *
*        (c) 2015 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

#include "main.h"
#include "encoder.h"
#include "DIALOG.h"

/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_FRAMEWIN_0    (GUI_ID_USER + 0x00)
#define ID_BUTTON_0    (GUI_ID_USER + 0x01)
#define ID_EDIT_0    (GUI_ID_USER + 0x02)
#define ID_SPINBOX_0    (GUI_ID_USER + 0x03)
#define ID_PROGBAR_0    (GUI_ID_USER + 0x04)
#define ID_TEXT_0    (GUI_ID_USER + 0x05)
#define ID_TEXT_1    (GUI_ID_USER + 0x06)
#define ID_TEXT_2    (GUI_ID_USER + 0x07)
#define ID_BUTTON_1    (GUI_ID_USER + 0x08)
#define ID_CHECKBOX_0    (GUI_ID_USER + 0x09)
#define ID_CHECKBOX_1    (GUI_ID_USER + 0x0A)
//
// Recommended memory to run the sample with adequate performance
//
#define RECOMMENDED_MEMORY (1024L * 15)


Motor motor;
int checkboxState, state;

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/


/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { FRAMEWIN_CreateIndirect, "Rail System",			 ID_FRAMEWIN_0, 0, 0, 480, 272, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Start",					 ID_BUTTON_0, 50, 130, 80, 40, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "Edit",					 ID_EDIT_0, 350, 80, 80, 20, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Edit",					 GUI_ID_EDIT1, 350, 160, 80, 20, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "Edit",					 GUI_ID_EDIT2, 350, 200, 80, 20, 0, 0x0, 0 },
  { SPINBOX_CreateIndirect, "Spinbox",				 ID_SPINBOX_0, 350, 25, 80, 40, 0, 0x0, 0 },
  { PROGBAR_CreateIndirect, "Progbar",				 ID_PROGBAR_0, 350, 120, 80, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "Desired Speed :",			 ID_TEXT_0, 260, 37, 80, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "Distance Traveled :",		 ID_TEXT_1, 245, 82, 100, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "Progress :",				 ID_TEXT_2, 290, 122, 80, 20, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Stop",					 ID_BUTTON_1, 50, 190, 80, 40, 0, 0x0, 0 },
  { CHECKBOX_CreateIndirect, "Checkbox",			 ID_CHECKBOX_0, 60, 65, 80, 20, 0, 0x0, 0 },
  { CHECKBOX_CreateIndirect, "Checkbox",			 ID_CHECKBOX_1, 60, 35, 80, 20, 0, 0x0, 0 },
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

//
// Dialog handles
//
WM_HWIN _hDialogMain;


/*********************************************************************
*
*       _SetEditValue
*/
static void _SetEditValue(int Id, float Value) {

  WM_HWIN hItem;
  hItem = WM_GetDialogItem(_hDialogMain, Id);
  EDIT_SetFloatValue(hItem, Value);
}

/*********************************************************************
*
*       _cbDialog
*/
static void _cbCallback(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  int     NCode;
  int     Id;



  switch (pMsg->MsgId) {
  case WM_INIT_DIALOG:
    //
    // Initialization of 'Edit0'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_0);
	EDIT_SetFloatMode(hItem, 0.0, -999.0, 999.0, 2, 0);
    //
    // Initialization of 'Edit1'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, GUI_ID_EDIT1);
	EDIT_SetFloatMode(hItem, 0.0, -999.0, 999.0, 2, 0);
    //
    // Initialization of 'Edit2'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, GUI_ID_EDIT2);
	EDIT_SetFloatMode(hItem, 0.0, -999.0, 999.0, 2, 0);
    //
    // Initialization of 'Checkbox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
    CHECKBOX_SetText(hItem, "Near Limit");
    //
    // Initialization of 'Checkbox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_1);
    CHECKBOX_SetText(hItem, "Far Limit");

    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_BUTTON_0: // Notifications sent by 'Start'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:

        break;
      case WM_NOTIFICATION_RELEASED:
    	  motor.dutyCycle(30);
        break;

      }
      break;
    case ID_EDIT_0: // Notifications sent by 'Edit'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_VALUE_CHANGED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_SPINBOX_0: // Notifications sent by 'Spinbox'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_MOVED_OUT:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_VALUE_CHANGED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_1: // Notifications sent by 'Stop'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:

        break;
      case WM_NOTIFICATION_RELEASED:
    	  motor.dutyCycle(0);
        break;

      }
      break;
    case ID_CHECKBOX_0: // Notifications sent by 'Checkbox'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:

        break;
      case WM_NOTIFICATION_RELEASED:

        break;
      case WM_NOTIFICATION_VALUE_CHANGED:

    	  hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
    	  checkboxState = CHECKBOX_GetState(hItem);
    	  state = CHECKBOX_IsChecked(hItem);
        break;

      }
      break;
    case ID_CHECKBOX_1: // Notifications sent by 'Checkbox'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_VALUE_CHANGED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END

        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/

/*********************************************************************
*
*       MainTask
*/
void MainTask(void) {
  WM_SetCreateFlags(WM_CF_MEMDEV);  // Use memory devices on all windows to avoid flicker
  GUI_Init();
  //
  // Check if recommended memory for the sample is available
  //
  if (GUI_ALLOC_GetNumFreeBytes() < RECOMMENDED_MEMORY) {
    GUI_ErrorOut("Not enough memory available.");
    return;
  }
  _hDialogMain  = GUI_CreateDialogBox(_aDialogCreate,  GUI_COUNTOF(_aDialogCreate),  _cbCallback,  WM_HBKWIN, 0, 0);


  while (1) {
    GUI_Delay(10);
    _SetEditValue(ID_EDIT_0, (int)(encoderCount));
    _SetEditValue(GUI_ID_EDIT1, motorSpeed);
    _SetEditValue(GUI_ID_EDIT2, motorRevolutions);

  }
}
/*************************** End of file ****************************/
